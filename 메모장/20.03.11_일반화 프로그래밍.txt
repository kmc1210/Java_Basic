
 + 일반화 프로그래밍
  - 자료형을 일반화시켜 프로그래밍하는 것
  
      int           === 일반화 ===> 데이터타입T
      double
      float
      boolean
      String
      Point
      Person
      ...
  
  - 자바에서는 제네릭을 이용하여 구현한다.
  
      ex)
      
      public void out(String var) {}
      public void out(Integer var) {}
      public void out(Boolean var) {}
      
      => public <T> void out(T var) {}
      
 + 제네릭, Generic
 
  - 클래스 또는 메소드에서 사용되는 다양한 데이터타입을
    일반화 시켜서 정의하는 방법
    
  - 코드 재사용성이 높아진다.
  
  - 타입 안정성이 제공된다.
        ** 타입 안정성, Type Safety
           객체 또는 메소드가 의도하지 않은 타입으로 사용되는 상황을 방지하는 것
           개발자가 의도한 데이터타입만 사용하도록 제한하는 것
           
  - 클래스와 메소드에 적용할 수 있다.
  
  - 불필요한 형변환을 줄일 수 있다.
  
 + 자주 사용되는 제네릭 타입 파라미터 이름
 
      T - Type
      
      E - Element
      
      K - Key
      
      V - Value
      
      N - Number
      
 + 제네릭 클래스
 
      [접근제한자] [클래스 식별자] class 클래스명<TYPE1, TYPE2, ...>{
      }
      
   - 제네릭이 적용된 클래스
   
   - 제네릭클래스를 이용하여 객체 생성을 할 때 타입 파라미터를 결정해주는 것이 좋다.
   - 타입파라미터를 결정하지 않으면 Object로 처리된다.
   
   - 제네릭클래스의 변수를 선언할 때 타입파라미터를 명시하고 
     객체를 생성하는 코드에서는 <> 만 적는다 ( JDK 1.7 이후 가능 )
        ex)    List<String> list = new ArrayList<>();
        
 + 제네릭 메소드
    
      [접근제한자] <TYPE1, TYPE2, ...> [리턴타입] 메소드명(매개변수) {
        //동작코드
      }
      
   - 메소드 내에서 사용되는 데이터타입을 일반화시켜 정의한다.
   - 매개변수, 반환타입, 지역변수, ...
   
   - 제네릭 메소드를 호출하면서 타입파라미터를 결정해준다.
   
      ex)   obj.<타입파라미터>메소드명(인자);
      
      ex)   obj.메소드명(인자);
            -> 매개변수가 타입파라미터를 사용하고 있어야 가능
            
 + 제네릭 타입 제한하기
  
      <T> : 어떤 타입 파라미터든지 허용하는 타입 T
      
      <T extends 부모클래스타입>
            지정된 부모클래스타입의 하위클래스들만 허용하는 타입파라미터 T
            
    - 특정 클래스의 하위 클래스로만 타입파라미터를 허용할 수 있도록
    제한하고 싶을 때 사용한다
    
    - 인터페이스로 설정하는 것도 가능하다.
    
        ex)     <T extends Number>
                -> Byte, Short, Long, Integer, Float, Double, ... 타입 가능
                
                -> String, Person, Point 등등 Number와 상속관계가 아닌 타입은 불가능
       
 + 제네릭 클래스, 제네릭 인터페이스 상속하기
 
    - 부모클래스(인터페이스)의 타입파라미터를 결정하면서 상속해야함
    
    - 부모타입에서 타입파라미터를 결정하지 않으면 자식클래스가 타입파라미터를 처리해야한다.
    
        -> 타입에 대한 결정을 미룰 수 있다.
        -> 자식클래스에서 지정한 타입파라미터로 사용한다.
    
 + 와일드 카드, Wildcard
 
    - 타입 파라미터에서 어떤 타입으로든 사용가능하도록 지정되는 제네릭
    
        <?> : 제한 없이 어떤 타입 파라미터로든지 사용할 수 있음 ( 안 좋음 )
        
        <? extends 상위타입>
                 지정한 상위타입의 하위클래스로만 사용할 수 있는 타입파라미터
                 
        <? super 하위타입>
                 지정한 하위타입의 상위클래스로만 사용할 수 있는 타입파라미터
