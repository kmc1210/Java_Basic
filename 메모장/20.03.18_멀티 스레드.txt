+  멀티 스레드, Multi-Thread
  
  - 프로그램, Program
       실행 파일 (exe 파일)
       하드디스크에 저장되어있는 상태
       
  - 프로세스, Process
       실행 중인 프로그램
       메모리(RAM)에 실행 상태로 로드된 프로그램
  
  - 스레드, Thread
      프로세스의 작업 단위(실행가능 단위)
  
  - 멀티 스레드, Multi-Thread
       스레드가 여러 개인 프로세스 상태  <- Java API
       
  - 멀티 프로세스, Multi Process
       프로세스가 여러 개인 프로그램
    
  - 프로세서, Processor
       프로세스를 동작시키는 장치, CPU
       
  - 멀티 프로세서, Multi Processor
       다중 처리 컴퓨터
       프로세서가 여러 개인 시스템(컴퓨터)
       
+ 멀티 스레딩 관련 클래스

  - interface Runnable
      run() 추상 메소드를 가지고 있음
      run() 메소드는 스레드화 될 수 있는 코드를 정의할 수 있다.
      스레드 코드를 작성(정의)하는 코드
      
  - class Thread implements Runnable
  
      run() 메소드를 가지고 있다.
      
      스레드를 제어하고, 관리하는 메소드들을 가지고 있다.
      스레드의 정보를 확인할 수 있도록 해준다.
      
      스레드를 실행시킬 수 있다 - start()메소드 이용
      
+ 스레드 동기화, Thread Synchronization

      - 여러 스레드가 하나의 같은 자원에 접근하려고 시도하는 경우 동시에 자원에 접근하는 상황을 막기 위한 처리
      
      - 스레드가 자원에 접근하면 다른 스레드가 접근할 수 없도록 LOCK을 건다
      - 작업이 완료되면 LOCK을 풀어준다.
      
+ 임계 영역, Critical Section

      - 동기화 처리 영역
      - LOCK 이 걸리는 영역
      - 여러 스레드들이 자원에 동시에 접근하는 것을 막는 영역
      - 자바에서는 synchronized 키워드를 이용하여 구현된다
      - 임계영역 객체마다 만들어진다.
      - 같은 클래스타입이더라도 다른 객체라면 서로 다른 임계영역을 가지고 있다.
      
+ 동기화 영역 설정 방법

      - 동기화 메소드
        [접근제한자] synchronized [리턴타입] 메소드명(매개변수){
        }
      
        메소드를 임계영역이 된다.
        한번에 하나의 스레드만 해당 메소드를 사용할 수 있게 된다.
        
      - 동기화 블록
            
            중괄호 블록 {} 에 synchronized 키워드를 붙인 것
            
            synchronized( 객체 ) {
            //임계영역
            //동기화처리된 코드
            //지정한 객체를 대상으로 임계영역이 설정된다.
            
            }
            
+ 임계영역(동기화 영역) 의 LOCK의 상태 통지(알림) 메소드

       - wait(), notify(), notifyAll()
       
       - 반드시 임계영역 내에서 호출해야 한다.
       
       - 임계영역에 접근 권한(LOCK)의 상태를 알리는 메소드이다.
       
       - wait()
            LOCK 반납
            
            notify 신호통지를 기다리는 상태가 된다.
            
            wait()을 호출한 스레드는 BLOCKED 상태가 된다
       
       - notify() : 대기 상태의 임의의 스레드에게 LOCK 상태를 통지한다.
       
       - notifyAll() : 대기 상태의 모든 스레드에게 LOCK 상태를 통지한다.
            -> 임계영역에 대한 LOCK이 반남되었음을 알린다.


 + 동기화 주의사항

  - 공정성, Fairness
	모든 스레드가 자원에 접근할 기회를 공정하게 받아야한다

  - 기아상태, Starvation
	자원에 대한 접근 기회를 얻지 못하는 스레드의 상태

  - 교착상태, Deadlock
	 스레드들이 서로 상대방이 사용중인 자원을 필요로하는데
	서로 반납하지 않는 상황

  - 경쟁상태, Race Condition
	 스레드들이 서로 자원 접근권한(LOCK)을 얻기 위해
	경쟁하는 상태 ( 스케줄링 )
