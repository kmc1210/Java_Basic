
 + 메소드에서 return 코드의 역할

  1. 반환값 지정

  2. 메소드 종료

  ** return 데이터 타입이 void인 메소드는 반환값을 지정하지 않고
     메소드를 종료시키는 역할만 수행할 수 있다.

	ex)	return;

  ** main() 메소드에서 return 코드를 수행할 경우 프로그램의 종료를 의미한다.

 + 클래스, Class

 	[접근제한자] [클래스식별자] class [클래스명] {
		
		//멤버 필드

		//멤버 메소드

	}

  - 접근제한자 : public 또는 안붙임(default)

	public 	- .java 파일의 이름과 같은 클래스명일 경우 붙일 수 있음
		- 하나의 JAVA파일 안에서는 하나의 public 클래스만 정의할 수 있다. 
		- <주 클래스> 주로 public이 붙은건 JAVA 파일의 주된 class라는 의미로 쓰임
	
	default - public 클래스 이외의 클래스에서 사용
		- <보조클래스>



  - 클래스 식별자 : 클래스의 용도에 따라서 식별할 수 있도록 사용하는 키워드
	abstract, final, static 등등.....


  - 클래스명 : 식별자, 첫 글자를 영어 대문자로 시작한다.




  - 멤버 필드 

	클래스를 구성하고 있는 변수와 상수
	주로 변수를 뜻한다.

	객체가 생성될 때마다 각각의 객체(인스턴스)마다 변수공간을 가지게 된다.



  - 멤버 메소드 

	클래스(객체)의 기능, 행위를 정의한 코드
	


  + 객체 변수 선언하기 

	[클래스명] [객체변수명];


  + 객체 생성하기(인스턴스화)

	[객체변수명] = new [클래스명]();


  + 객체의 멤버에 접근하기(참조하기)

	[객체변수명].[멤버필드명]

	[객체변수명].[멤버메소드명]()


  * NullPointerException 이 발생하면 Null값 쪽
  * 참조연산자 . 을 이용하여 객체변수를 통해 멤버에 접근할 수 있다.


  + Getter Method

	- 멤버필드의 값을 가져올 수 있도록 만든 메소드 (읽기)

	- 메소드명을 "get"으로 시작하고 멤버필드의 첫 글자를 대문자로 작성한다.

	- 형식
		public [해당 필드의 데이터타입] getXxxx() {
		 return [필드의 변수명];
		}

		ex)  private int num; //멤버필드 num

		     public int getNum() {
			return num;
		}

  + Setter Method

	- 멤버필드의 값을 저장할 수 있도록 만든 메소드 (쓰기)

	- 메소드명을 "set"으로 시작하고 멤버필드의 첫 글자를 대문자로 작성한다.

	- 형식
		public void setXxxx([해당 필드의 데이터타입] [필드명]) {
		  this.[필드명] = [필드명];
	}

	ex)	private int num; //멤버필드 num

		public void setNum(int num) {
		  this.num = num;
		}
	** Generate Getters and Setters를 통해 생성

  +  클래스 내부에서 사용되는 변수의 유형

	- 인스턴스 변수, Instance Variable
		일반적인 멤버필드
	
		객체를 생성(인스턴스화)하면 각 인스턴스마다 변수 공간을 따로 가짐

		

		
	- 클래스 변수, Class Variable

		정적 변수

		static 키워드가 적용된 멤버 필드
		
		클래스 당 하나의 공간을 생성되는 변수

		프로그램 실행되기 전(정적인 시점)에 미리 메모리의 클래스 영역에 생성한다.

		해당 클래스 타입으로 생성된 객체들이 하나의 공간을 공유한다.

		객체를 생성하지 않아도 클래스 멤버를 사용할 수 있다.*********


  + static 키워드, 정적 키워드

	- 클래스의 멤버를 인스턴스화(객체생성)없이 사용할 수 있게 만드는 키워드

	- 멤버 필드, 멤버 메소드 모두에게 적용할 수 있다.

	- 객체(인스턴스)와 상관없이 사용할 수 있고 클래스 단위로 제어된다.

	- 클래스마다 따로 관리한다.

	- 정적인 시점(프로그램 동작 직전)에 사용할 수 있는 준비가 완료된다.

	- 멤버 필드는 클래스 영역에서 변수 공간 생성

	- 멤버 메소드는 실행할 수 있는 준비가 완료됨(바인딩)




  ** 정적메소드에서 인스턴스 변수 사용할 수 없다.
  ** 정적메소드에서는 정적 변수만 사용해야 한다.

  ** 일반 메소드에서 인스턴스변수, 정적변수 둘 다 사용할 수 있다.

  ** main() 메소드는 static(정적) 메소드이다.

	- 지역 변수, Local Variable

		메소드 내에서 선언된 변수

		접근제한자 사용할 수 없음

		매개변수도 지역변수로 취급됨

		메소드 마다 별도의 공간(스택 메모리 영역)에 생성된다.
		(같은 이름의 변수가 다른 메소드에 존재할 수 있다.)

		초기화하지 않으면 쓰레기값을 가진다.


 + 메소드 오버로딩, Method Overloading

  - 메소드 중복정의

  - 같은 이름의 메소드를 여러 개 정의하는 것

  - 비슷한 기능을 하는 추가 메소드를 개발하기 위해 별도의 이름을 사용하지않고
    기존의 메소드 이름을 사용할 수 있게 해준다.


 + 메소드 오버로딩 성립 조건

  - 매개변수의 데이터타입이 다른 경우

  - 매개변수의 데이터타입의 개수가 다른 경우



  ** 반환 데이터타입이 오버로딩과 상관없다


