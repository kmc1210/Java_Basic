
  + 생성자, Constructor

	ex) new Overloading();
		(Constructor)

	- 객체가 생성될 때 반드시 호출되는 특수한 메소드

	- 역할 : 객체를 초기화(Intialize) 한다.
	
		생성된 이후 최초로 가지고 있어야할 값을 지정한다(대입한다).
		
		객체(인스턴스)가 가지고 있는 멤버 필드(인스턴스 변수)를 초기화한다.

	- 생성자를 하나도 정의하지 않으면 디폴트 생성자를 컴파일러가 자동으로 추가한다.
		
		** 디폴트 생성자 : 매개변수가 없는 형태의 생성자.

	- 생성자가 하나라도 정의되어 있으면 디폴트 생성자를 자동으로 추가하지 않는다.

	- 메소드와 비슷한 구조를 가진다.

	- 리턴이 없다.

	- 오버로딩이 가능하다.

	- 생성자의 이름은 클래스명과 같다.

	- 생성자의 호출은 new 연산자와 함께 사용한다.

  + this 키워드

	- 자기 참조 객체

	- 클래스 코드에서 (메소드 정의코드) 다른 멤버를 지칭할 때 사용한다

	- 주로 멤버필드와 매개변수가 같은 이름일 때 서로를 구분하기 위해 사용한다.
		ex)	setter
	
	
  + this() 생성자	

	- 생성자 코드에서 다른 생성자를 호출할 때 사용한자

	- 다른 생성자에서 이미 정의 되어져있는 초기화 코드를 다시 작성하지 않고
	  재사용할 수 있게 된다.


  + UML, Unified Modeling Language

	- 통합 모델링 도구(언어)

	- 프로젝트 참가자들이 의사소통을 원할하게 하기 위해 작성하는 문서를 작성하는 도구
		** 프로젝트 참가자 : 기획자, 개발자, 디자이너, 사장, 대표, 고객사, 의뢰인,
				     사용자 등등

	- 기획, 설계, 구현으로 이루어진 프로그램 개발 절차에서 발생하는
	  중간 산출물을 표현하기 위해 표준화된 모델링 언어
	
	--------------------------------------------

	- 화면정의서 
		
		화면을 구현하기 위한 설계 문서
		
		스토리보드 
	
 기획 |	- 요구사항 명세서, 정의서 

		프로그램의 요구사항을 정리한 문서

		** 요구사항 : 프로그램에서 개발해야하는 것들, 주의해야하는 것들

	- 유스케이스 다이어그램

		요구사항의 기능들을 표현한 그림

		프로그램을 사용하는 행위자(Actor) 를 중심으로 표현한다.


	--------------------------------------------

	+ 클래스 다이어그램, Class Diagram

		- 클래스들의 구조를 표현한 것 (정적)	

		- 프로그램 설계 시 클래스의 형태, 구조, 클래스간의 관계 등을
		  그림으로 표현한 것	
		
		- 시스템의 논리적 구조를 표현한 다이어그램

			** 시스템의 논리적 구조 = 클래스의 구조 + 클래스들 간의 관계

			-------------
			|클래스 이름|
			-------------
			|멤버   필드|
			-------------
			|멤버 메소드|
			-------------	

 설계 |	- 시퀀스 다이어그램

		클래스의 동작을 표현한 것 (동적)

	- 패키지 다이어그램
		
		프로그램의 패키지를 표현한 것

	--------------------------------------------


	- 접근제한자 표현 기호

		+ : public
		# : protected
		~ : default
		- : private

		ex)	멤버필드 표기 예시

			private String name;	- name : String

			public int num;		+ num : int

			double height;		~ height : double

		ex)	멤버메소드 표기 예시

			public String getName() {}	+ getName()  : String

			private double display(int n1, int n2) { }
							- display(int , int) : double



	- 스테레오 타입, stereotype
		
		특수한 기능을 수행함을 표현하는 것

		<<override>> 처럼 <<>> 를 이용하여 표현한다.


		ex) 주석처럼 사용함

			<<constructor>>
			+ Person()

			<<getter>>

			<<setter>>
	



