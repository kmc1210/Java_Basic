
 - 자료형
	int, double, char, boolean
	byte, short, long, float

 	참조형

 - 변수, 상수



 - 연산자
	단항, 이항, 삼항

	산술, 관계, 논리, 대입, 기타+비트

 - 스캐너

 - 스트림, 표준입력(System.in), 표준출력(System.out), 버퍼

 - 제어문

	조건문 if, else if, else

	반복문 for, while, do-while

	선택문 switch - case

 - 배열

 - 버블정렬

	얕은 복사, 깊은 복사

 지금까지 공부한 내용?!
-----------------------------------------------------------


 + 객체 지향 프로그래밍

  - Object Oriented Programming, OOP
  
  - 객체들의 상호작용(데이터 전달)을 통해 프로그램에 동작하도록
    작성하는 프로그래밍 기법




  - 객체(Object)
	
	프로그램에서 구현하고자하는 모든 대상
	현실 세계에 존재하는 모든 것들
	
				   (추상화)	    	   (객체생성) - new 연산자를 통해 구현
  * 현실 세계의 대상, Object, 객체 --------> 클래스, class -----------> (인스턴스) 객체
			    (코드화 시켜서 변경)
	
	사람					class Person{	     	Person p1;
	(이름, 나이, 발 사이즈,			 String name;        	p1.name = "개똥이";
	 키, 몸무게, 혈액형,			 int age;	     	p1.age = 26;
	 출신 초등학교, 취미,			}
	 등등 )
									Person p2;
									p2.name = "말똥이";
									p2.age = 30;


									Person p3;
									p2.name = "소똥이";
									p2.age = 44;



 + 인스턴스, Instance

  - 클래스 정의 코드를 통해서 생성된 객체

  - 메모리에 생성된 객체

 
 + 인스턴스화, Instanciate (구상한 것을 실체화 시키는 것)

  - 실체화

  - 메모리에 실체화 하는 작업

  - 클래스 정의코드를 통해 메모리에 실제 저장 공간을 생성하는 일 (new 연산자 이용)



	** 설계도 -> 건물
	** 클래스 -> 인스턴스


 + 접근제한자, Acess Modifier

  - 목적 : 객체의 고유한 속성(멤버 필드), 동작(멤버 메소드)에 대한 정의들을 
	   객체의 외부에 함부로 공개되지 않도록 하기 위해 사용한다.

  - 객체의 멤버들은 프로그램을 구성하는 중요한 정보를 담고 있기 때문에
    객체의 외부에서 함부로 변경하도록 놔두면 프로그램에 악영향을 끼칠 수 있다.

  - 접근제한자를 이용해 공개 범위를 조절한다.


 + 접근제한자의 종류

  - private : 해당 클래스 내에서만 접근 가능

  - default(package) : 같은 패키지내에서 접근 가능

  - protected : 같은 패키지 + 상속 관계에 있는 객체에서 접근 가능

  - public : 모든 접근 허용



 + 접근제한자 적용할 수 있는 위치

  - 멤버 필드 : 4가지 전부 가능, private

  - 멤버 메소드 : 4가지 전부 가능, public

  - 클래스 정의 : public 과 default 만 가능



 + 접근 제한자의 공개 범위

     private < default < protected < public


 + 정보 은닉, Information Hiding

  - 접근제한자를 이용하여 구현된다.

  - 객체(클라스)의 중요한 정보를 함부로 공개되지 않도록 관리한다.


 + 캡슐화, Encapsulation

  - 객체를 이루는 정보(필드), 기능(메소드) 들을 하나로 묶은 것   

  - 데이터 + 기능

  - 프로그램에서 서로 관련있는 파트(모듈)를 하나의 클래스로 묶어서 표현하는 것

  - 클래스(Class)

	객체의 정보 중 프로그램에서 필요로 하는 것들만 코드화한 것
	객체를 추상화한 것


  ** 추상화, Abstraction

	현실 세계의 대상을 나타내는 객체의 공통으로 존재하는 속성, 기능, 행위 등을 개념화하는 작업

	-> 프로그램에서 필요한 요소들만 뽑아서 정리한 것


	프로그램에서 필요한 주요 관심사만 고려한다.
	불필요하거나 중요하지 않은 요소는 무시한다.

