
 + 프로그램 개발 오류, 에러(Error)
 
  1. 컴파일 타임 에러, Compile Time Error
  
        컴파일 시점에 발생하는 에러
        
        이클립스에서는 소스코드를 저장하는 즉시
        
        주로 문법 에러(Syntax Error)
        
  2. 런타임 에러 Runtime Error
  
        프로그램 실행 도중 발생하는 에러
        
        수행할 수 없는 작업을 시도할 때
        
        주로 Exception(예외)로 처리된다.
        
        NullPointerException : null값을 참조해서 코드를 수행하려고 할 때
        
        ArrayIndexOutOfBoundsException : 배열의 인덱스를 잘못 사용했을 때
        
        ArithemeticException : 불가능한 산술 연산을 수행했을 때
        
  3. 논리 에러, Logical Error
      
        프로그램이 에러없이 잘 동작함
        
        프로그램의 흐름, 동작이 개발자의 의도대로 수행되지 않을 때
        
        ex)   무한 루프
        
  + Thrwable 클래스
  
    - 에러(Error) 와 예외(Exception) 클래스의 부모 클래스
  
  + Error 클래스, 에러
  
    - 심각한 수준의 오류
  
    - 복구 불가능한 문제
    - 프로그램이 무조건 중단됨
    
    - 시스템에 변화를 주어서 문제를 해결해야함
    - 프로그램 자체가 해결할 수준이 아닌 문제들
    
          ex) OutOfMemoryError
    
  + Exception 클래스, 예외
    
    - 프로그램의 예외적인 상황
    
    - 개발자가 예외 상황을 예측해서 프로그램 로직으로 처리가능한 수준의 오류
    
    - 논리적으로 예상 가능했던 상황
    
    - 미리 예외 상황을 처리해아함 -> 예외 처리, Exception Handling
          try - catch 구문을 이용해 처리한다.
          
  + Throwable 클래스 계층구조
________________________________________________________________________________
   Object
      |
      |
      |                       
  Throwable
      |-----------------------|
      |                       |
      |                       |
    Error                   Exception
  [Critical Error.]           |-------------------------------|
                              |                               |
                            여러 Exception                  RuntimeException
                       [Checked Exception]                    |
                                                              |
                                                             여러 Exception
                                                          [Unchecked Exception]
 _______________________________________________________________________________ 
 
 
 + Error
 
 
 + Checekd Exception
 
    - Exception의 하위클래스들 중 RuntimeException의 하위클래스를 제외한 것
    
    - 반드시 예외처리구문(try - catch) 사용해서 예외 처리를 해야만 하는 클래스
    
    - 예외처리하지 않으면 컴파일 에러 발생한다.
    
    - 코드 작성단계에서 미리 체크해서 예외처리구문을 작성해야 한다.
    
          ex)   IOException, SQLException, ...
          
          
 + Unchecked Exception
 
    - RuntimeException 의 하위클래스
    
    - 반드시 처리하지 않아도 되는 예외
    
    - 프로그램 실행 도중 예외가 발생하면 그 결과를 보고
      예외가 발생하지 않도록 코드를 작성하거나 예외처리구문을
      작성하여 처리한다.
      
        ex)   NullPointerException, IndexOutOfBoundsException, ... 
        
 + 예외 발생 시 체크사항
    
    1. 예외 클래스 이름( 정보, 계층구조 )
         java.lang.ArrayIndexOutOfBoundsException
         
         배열의 인덱스를 벗어나서 접근하려고할 때 발생한다.
         
         Unchecked Exception
         
    2. 발생 지점
      
        at java12_Exception.Exception_01_Basic.main(Exception_01_Basic.java:12)
        
    3. 에러 메시지
    
        5
 
 + 예외 처리 구문, Exception Handling
 
    - try ~ catch 구문
    
        try{
          //예외가 발생할 수 있는 코드
          
        } catch( Exception e) {
          // 예외 처리 코드
        
        } finally {
          // 생략 가능
          // 예외 발생과 상관없이 반드시 실행해야하는 코드
        
        }
