
 + 메소드에서 return 코드의 역할

  1. 반환값 지정

  2. 메소드 종료

  ** return 데이터 타입이 void인 메소드는 반환값을 지정하지 않고
     메소드를 종료시키는 역할만 수행할 수 있다.

	ex)	return;

  ** main() 메소드에서 return 코드를 수행할 경우 프로그램의 종료를 의미한다.

 + 클래스, Class

 	[접근제한자] [클래스식별자] class [클래스명] {
		
		//멤버 필드

		//멤버 메소드

	}

  - 접근제한자 : public 또는 안붙임(default)

	public 	- .java 파일의 이름과 같은 클래스명일 경우 붙일 수 있음
		- 하나의 JAVA파일 안에서는 하나의 public 클래스만 정의할 수 있다. 
		- <주 클래스> 주로 public이 붙은건 JAVA 파일의 주된 class라는 의미로 쓰임
	
	default - public 클래스 이외의 클래스에서 사용
		- <보조클래스>



  - 클래스 식별자 : 클래스의 용도에 따라서 식별할 수 있도록 사용하는 키워드
	abstract, final, static 등등.....


  - 클래스명 : 식별자, 첫 글자를 영어 대문자로 시작한다.




  - 멤버 필드 

	클래스를 구성하고 있는 변수와 상수
	주로 변수를 뜻한다.

	객체가 생성될 때마다 각각의 객체(인스턴스)마다 변수공간을 가지게 된다.



  - 멤버 메소드 

	클래스(객체)의 기능, 행위를 정의한 코드
	


  + 객체 변수 선언하기 

	[클래스명] [객체변수명];


  + 객체 생성하기(인스턴스화)

	[객체변수명] = new [클래스명]();


  + 객체의 멤버에 접근하기(참조하기)

	[객체변수명].[멤버필드명]

	[객체변수명].[멤버메소드명]()


  * NullPointerException 이 발생하면 Null값 쪽
  * 참조연산자 . 을 이용하여 객체변수를 통해 멤버에 접근할 수 있다.


  + Getter Method

	- 멤버필드의 값을 가져올 수 있도록 만든 메소드 (읽기)

	- 메소드명을 "get"으로 시작하고 멤버필드의 첫 글자를 대문자로 작성한다.

	- 형식
		public [해당 필드의 데이터타입] getXxxx() {
		 return [필드의 변수명];
		}

		ex)  private int num; //멤버필드 num

		     public int getNum() {
			return num;
		}

  + Setter Method

	- 멤버필드의 값을 저장할 수 있도록 만든 메소드 (쓰기)

	- 메소드명을 "set"으로 시작하고 멤버필드의 첫 글자를 대문자로 작성한다.

	- 형식
		public void setXxxx([해당 필드의 데이터타입] [필드명]) {
		  this.[필드명] = [필드명];
	}

	ex)	private int num; //멤버필드 num

		public void setNum(int num) {
		  this.num = num;
		}


  +




















