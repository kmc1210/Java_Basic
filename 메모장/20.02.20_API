  
  + API, Application Programming Interface
   
   - 프로그램을 개발하기 위해 만들어진 코드들
   
   - 응용프로그램이 운영체제(OS)나 기타 시스템과 상호작용(통신)을
     할 때 사용되는 메세지 형식의 모음 ( 메소드들 )
    
   - 프로그램을 개발하기 위해 자바에서 제공해주는 기본적인 클래스들
   - JDK에 같이 배포된다.
   
  + Object 클래스
  
   - 패키지 : java.lang
   
   - 자바의 모든 클래스의 최상위 부모 클래스
   
   - 모든 클래스는 Object를 상속받고 있다.
   
   - 자바 프로그래밍의 기본이 되는 클래스
   
  + Object 클래스의 메소드
  
   - 재정의(override) 불가 메소드
        
        // 스레드 동기화에 사용
        notify
        notifyAll
        wait
        
        //클래스의 타입 정보를 반환
        getClass
   
   - 재정의(override) 가능 메소드
   
        toString
        
                객체를 설명하는 문자열 반환
                
                기본리턴값 - "데이터타입@참조값" 형식의 문자열
      
                System.out.println() 메소드의 전달인자 객체를
                사용하면 해당 객체의 toString() 반환값을 출력
      
        equals
                객체가 같은 값을 가지고 있는지 비교하는 코드로 재정의해서 사용
                (동등성, equality)
                
                ** 주의 : 기본동작은 같은 객체인지 비교한다
                (동일성, identity)
                
                
        hashCode
          
                객체의 고유값을 반환한다.
                
                기본동작으로는 객체의 참조값을 10진수(int)로 반환한다.
        
                ** String 은 같은 데이터라면 같은 HashCode를 반환한다.
                ** String 은 동등한 객체에서 같은 HashCode를 반환한다.
                
        clone
        
                객체 복사 메소드
                
                
                protected 접근제한자로 설정되어있다.
                사용하려는 클래스에서 public 으로 오버라이딩한 후 사용한다.
                
                반환하는 타입이 Object이므로 형변환 필요하다
                
                예외 처리 구문(try-catch)을 추가해야한다.
                
                clone()을 구현하는 클래스는 interface Cloneable을 상속해야한다.
                
                깊은 복사가 이루어진다.
        
        
        finalize
        
                GC(Garbage, Collector, 가비지 콜렉터)가 객체를 파괴할 때
                호출하는 메소드
                
                건들지 말 것!
                재정의하지 마세요!
                
        
        
+ Math 클래스
  
  - 수학(산술)적인 연산을 정적메소드로 제공하는 클래스
  
  - 멤버필드로 E(자연상수), PI(원주율) 두 가지를 정적멤버로 가지고 있다.
  
  - 사용방법
  
      System.out.println( Math.abs(-5) ); //absolute, 절대값
    
      -> 5
      
   
+ Random Number, 난수

  - 의사 난수 (꾸며진 난수, 진짜가 아님)
        
        + 의사 난수 생성 원리
        
         - 기초값(seed)을 복잡한 연산을 통해 역으로 추적하기 힘들게 만든다.
         
         - 하지만 seed가 고정되거나 미리 연산식을 알고 있다면 결과가 예측된다.
            -> 해결법 : seed를 계속 바꾼다
           
         - seed를 HWClock으로 이용한다.
              **HWClock :1970년 1월 1일 00시를 기준으로 현재까지 흘러간 초
      
         - 난수를 연속적으로 추출할 때에는 이전 난수를 seed로 사용한다.
        
         - public static double Math.random(); 메소드를 이용하여 의사난수를 생성한다.     

         - Random 클래스를 사용한다.
  - 알수없는 값
  
  - Pseudo Random
        ** Pseudo, 수도, 슈도 : 가짜의, 꾸며진
        
        
        
