  
 + String

  - 문자열을 저장할 때마다 새로운 공간을 할당한다

	  String str = "Apple";
	  str = "Banana";
	  str = "Cherry";


  - 문자열을 수정할 때에도 새로운 공간을 할당한다.
  
      String str = "Apple";
      str += "Banana";
      
  - 단순 문자열을 저장할 때 좋음 ( 더 이상 편집되지 않는 문자열 )
  
  - 문자열의 값의 변경이 자주 발생할 경우 공간효율(메모리), 성능효율(수행시간)이 전부 떨어진다.
  
      -> 문자열의 수정, 삭제가 자주 발생할 경우
            StringBuffer 나 StringBuilder를 사용하는 것이 좋다.
            
            
 +  StringBuffer, StringBuilder
 
  - 객체 내부에 문자열 저장공간을 만들어서 관리한다.
  
  - 문자열 저장공간을 관리하면서 문자열을 다룬다 (크기 확장, 축소 가능)
  - 수정이 빈번한 문자열 관리에 효율적이다.
 
  - 문자열 저장공간의 크기(capacity)의 기본값이 16개
  (Capacity : 문자열 저장 공간의 최대 저장 크기)
  
  - capacity보다 더 긴 문자열을 저장해야 한다면 크기가 확장된다.
  ((기존 capacity +1) * 2 만큼 확장)
  
  - 한번에 (기존capacity + 1) * 2 보다 긴 문자열을 저장하는 상황에서는
    length() 만큼 capacity가 설정된다.
