
+ execute 메소드의 종류

  - 매개변수로 전달받은 sql구문을 수행하는 메소드
  
  
  - ResultSet executeQuery(String sql);
  
      SELECT 쿼리의 결과를 ResultSet으로 반환
      
      ResultSet에는 조회된 모든 행을 담고 있다
      
      ResultSet객체.next() 호출할 때마다 결과집합의 각 행을 나타낸다.
    
  - int executeUpdate(String sql);
  
      영향받은 행의 수를 int형으로 반환
      
      주로 INSERT, UPDATE, DELETE를 수행할 때 사용한다
      
  - boolean execute(String sql);
  
      반환값
      true - ResultSet 객체를 반환하는 쿼리를 수행했을 때 ( SELECT )
      false - ResultSet 객체를 반환하지 않는 쿼리를 수행했을 때
      
      주로 DDL( CREATE, ALTER, DROP ) 을 수행할 때 사용한다
      
+ DTO, Data Transmission Object  

 - 데이터 전송 객체
 
 - 계층(Layer) 간 데이터 교환을 위해 작성되는 자바 클래스
 
 - DTO 작성 규칙 
       멤버 필드는 모두 private 접근 제한자를 적용한다
       
       메소드는 getter, setter, toString 만 작성한다
       (추가적인 일반메소드는 작성하지 않는다)
       (데이터 이외의 추가 기능을 넣지않고 데이터에만 집중한다)
 
       클래스명을 데이터베이스의 테이블명으로 작성하는 것이 좋다
       
       클래스의 필드명은 데이터베이스의 컬럼명으로 작성하는 것이 좋다
       
+ VO,  Value Object

 - 데이터를 저장하기 위해 작성되는 자바 클래스
 
+ DAO, Data Access Object

 - 데이터베이스의 데이터에 접근하기 위해 작성되는 객체
 
 - 데이터베이스에 수행할 SQL 구문 하나를 하나의 메소드로 구현한다

 - interface와 class로 나누어서 작성하면 좋다
 
      -> interface에서 구현된 메소드들의 목록을 간편히 확인할 수 있다
      -> interface에 메소드마다 주석을 작성해놓는 것이 좋다
         (전체적인 개요를 한눈에 볼 수 있음)
         
      -> class에는 실제 구현 코드를 작성한다
      
      -> interface는 개발하는 시점에 메소드 형식에 대한 가이드가 된다.
      
 
 
 
 
 
