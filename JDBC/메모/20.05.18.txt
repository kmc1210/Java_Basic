
 + 프로그래밍 아키텍쳐, Architecture

	- 프로그램 작성 구조

	- 프로그램 코드의 기능별 구성
	
	- MODEL 1 : 비지니스 로직과 프레젠테이션 로직을 하나로 합쳐놓은 구조

	- MODEL 2 : 비지니스 로직과 프레젠테이션 로직을 분리해놓은 구조


 + 비지니스 로직, Business Logic

	- 클라이언트( 사용자 ) 한테 보이지 않는 부분

	- 데이터를 처리(가공)하는 응용프로그램의 일부 영역

	- 주로 데이터베이스 처리 작업을 수행한다
		ex) 	로그인 데이터 ( id , pw) 인증
		ex) 	게시글 조회결과 가져오기 

 + 프레젠테이션 로직, Presentation Logic

 	- 클라이언트( 사용자 ) 한테 보이는 부분 

	- 출력 화면을 구성하는 응용프로그램의 일부 영역
  
 + 모델 1 아키텍쳐, MODEL 1
 
  - 비지니스 로직 + 프레젠테이션 로직을 하나의 파일로 구현한 것
  
  - 장점 
        
        초기 작업(개발)이 쉽다
        
        파일의 구조가 단순해서 직관적이다
        
        중소형 프로젝트에 어울린다
        
  - 단점
        
	      코드가 섞여있어 유지보수가 어렵다
        
        프로젝트 적응력이 떨어진다
        프로젝트 변화에 즉각 반응하기 어렵다
        
        재사용성이 떨어진다
        
        분업이 힘들다
        대형프로젝트에 어울리지 않는다
        
        
 + 모델 2 아키텍쳐, MODEL 2
 
  - 비지니스 로직과 프레젠테이션 로직을 다른 파일로 분리한 형태
  
  - 분업하기에 적절하며 대형 프로젝트에 잘 어울린다
  
  - 재사용성을 높여 코드를 개발한다
  
  - 단, MODEL 2 개발방식에 대한 이해가 있어야한다
  - 기본 지식의 요구수준이 높은 편이다
  
+ 디자인 패턴, Design Pattern

  - 잘 알려진 알고리즘들을 정리한 것
  
  - 프로그램 설계 상 발생하는 문제(issue)에 대한 해답을 문서화 한 것
  
  - 프로그램을 개발하면서 자주 마주치는 상황(문제점)을 해결하기 위한 설계 노하우를 적용시킨 형태
  
    * 로직(Logic) : 논리성이 부여된 코드구조
    * 알고리즘(Algorithm) : 어떠한 문제를 해결하기 위한 일련의 절차나 방법(finite sequence)을 공식화한 형태로 표현한 것
    
+ MVC패턴

  - 프로그램을 세가지 파트(역할)로 구분하여 개발하는 방법론
  
  - MODEL 2 기반의 MVC패턴을 적용한다
  
  - Model, View, Controller 의 약자
  
  - Model : 데이터베이스(저장소)의 데이터를 처리하는 파트
            데이터베이스(저장소)의 데이터를 관리
            DAO, DTO
            
  - View : 사용자가 보는 화면을 구성하는 파트
           프레젠테이션 로직
           
  - Controller : 사용자의 입력처리, 프로그램 흐름제어, 사용자와의 상호작용
                 비지니스 로직
                 
** 웹 프로그래밍에서는 Controller의 역할 나누어 Service Layer를 둔다                 
          
    Service 계층은 비지니스 로직의   

    Controller의 역할 1.
    
          사용자의 입력 처리
  
  
    Controller의 역할 2.
    
          데이터베이스 데이터 처리(가공)하기
          
          도메인(Domain) 객체를 처리하는 로직
          
          도메인 객체 == DB데이터 객체 == VO == DTO
          
          
    Controller의 역할 3.
    
          View 요청
          어떤 화면을 보여줄 것인지 View를 선택한다
          Model(DB데이터)과 View(화면)의 연결 지점이 된다
          
          -> DAO가 처리한 결과를 View에 전달한다
              
              
    ** 역할 2번(도메인로직) 을 Service 가 담당하도록 만든다
    
    
    
   ******************************************* 시험문제 Service에서 호출하는 DAO를 작성하기
